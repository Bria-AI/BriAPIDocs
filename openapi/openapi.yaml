openapi: 3.0.0
info:
  description: >
    The BriAPI was designed for users to interact with the Briengine, creating
    new images with specific requests. Visit the Bria website to see more of our
    products, at [http://bria.ai](http://bria.ai) 


    # Versioning


    The current version of the web API is known as V1 and is considered to be
    in a draft phase. While we donâ€™t expect public endpoints to change greatly,
    keep in mind that the API is still under development.


    # Authentication
    
      The BriAPI consists of a number of methods for uploading and creating new visual assets. The REST API methods can be called directly from within your own custom code.

        curl --location --request POST 'https://briator-api.bria.ai:5000/v1' \
        --header: 'api_token: <...>' \
        --header: 'api_secret: <...>' \
        ...
        
        
      You can access the API Token and API Secret through Bria's platform [by clicking here](https://labs.bria.ai/organization/).
      
      
    # Demonstration of usage
      
      For a full example of the BriAPI usage, using python code, [please check this link](https://github.com/Bria-AI/BriAPI/blob/main/demo.py)

            
  version: '1'
  title: BriAPI
paths:
  /create:
    post:
      tags:
        - create
      summary: Create new image based on changes requested by user
      description: >-
        
        <img src="https://bria-web-serving.s3.amazonaws.com/_create.png" />
        
        
        **Description**
 
        
        
        The create method is used to create a new visual based on a previously existing one and the changes requested by the user.  It takes as parameters the api_token and api_secret, on the headers of the request, and , in the body of the request, a JSON format object containing the visual hash of the image and a array of changes - **described in detail in the body parameters section**.
        
        
        In case of success, the create route will return to the user a JSON format object, containing the url for accessing the new generated image and the confidence that Bria has on the quality of the  generated visual. The create route is the way to interact with the Bria magic.
        

        **Response**


        image_res - url to new created image
        
        
        confidence - string indicating the level of confidence Bria has in the quality of the created image


        ```{ "image_res": "...", "confidence": "..." }```
        
        
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:     
                visual_id:  
                  type: string
                  description: visual id of the image the user wants to create a new one from
                changes:  
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: id of the individual in the image
                      actions:
                        type: object
                        description: the changes the user wishes to perform for this person in the image
                        properties:
                          age:
                            type: string
                            enum: ["mid-20", "mid-40", "mid-60"]
                            description: Value must be included in the response of the info route in order for the request to be succesfull
                          diversify:
                            type: string
                            enum: ["original", "africa", "korea", "india", "japan", "sweden", "germany", "russia", "mexico", "brazil", "england", "spain", "france", "unsplash"]
                            description: Value must be included in the response of the info route in order for the request to be succesfull
                          glasses:
                            type: string
                            enum: ["light", "heavy", "none"]
                            description: Value must be included in the response of the info route in order for the request to be succesfull
                          smile:
                            type: string
                            enum: ["happy", "calm", "serious"]
                            description: Value must be included in the response of the info route in order for the request to be succesfull
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_res:
                    type: string
                  confidence:
                    type: string
                    description: Low, high or intermidiate
        '400':
          description: Bad request.

  /info:
    post:
      tags:
        - info
      summary: Getting image info
      description: >-
        
        **Description**
        
        
        The info method is used to retrieve usefull information on a specific visual previously uploaded to the database.  It takes as parameters the api_token and api_secret, on the headers of the request, and the visual hash of the required image, in query parameters.
        
        
        In case of success, the info route will return to the user a JSON format object, containing a description of the visual and the possible actions to be used in the creation route - **check response code 200 for details on the format of the response**. The info route will clarify the possible changes the BriAPI supports for a specific image and its individuals.
        

        
        **Response**


        Dict - A dictionary of relevant information about the required image. An object with JSON format, containing two key-value pairs:
        
          - **description**: a brief description of the visual
          - **scene**: an array of objects representing each of the individuals recognized in the visual.
          
        Each object inside the *scene* array will contain:
          
          - **id**: the id of the specific individual
          - **labels**: an array with known information on the individual, such as age range and gender
          - **actions**: an object containing the available changes for the */create* route.
          
        The *actions* object contains the following key-value pairs:
        
          - **age**: an array containing the available age modifications for the individual. Example:
              
              
            { "age": [ "mid-20", "mid-40" ] }  *

              
              
          - **diversify**: an array containing the available ethnicity modifications for the individual. Example:
              
              
            { "diversify": [ "africa", "brazil", "mexico" ] }  *

            
          - **glasses**: an array containing the available glasses modifications for the individual. Example:
              
              
            { "glasses": [ "light", "none" ] }  *

            
          - **smile**: an array containing the available smile modifications for the individual. Example:
              
              
            { "smile": [ "calm", "serious" ] }  *
        
          
          *check response schema for full enums
      operationId: info
      parameters:
        - in: query
          name: visual_id
          required: true
          schema:
            type: string
          description: visual hash of the image
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                    description: description of the image
                  scene:
                    type: array
                    items:
                      type: object
                      properties:
                        actions: 
                          type: object
                          properties:
                            age:
                              type: array
                              items:
                                type: string
                                enum: ["mid-20", "mid-40", "mid-60"]
                            diversify:
                              type: array
                              items:
                                type: string
                                enum: ["original", "africa", "korea", "india", "japan", "sweden", "germany", "russia", "mexico", "brazil", "england", "spain", "france", "unsplash"]
                            glasses:
                              type: array
                              items:
                                type: string
                                enum: ["light", "heavy", "none"]
                            smile:
                              type: array
                              items:
                                type: string
                                enum: ["happy", "calm", "serious"]
                        id: 
                          type: string
                        labels:
                          type: array
                          items:
                            type: string
                            
        '400':
          description: Bad request.
  /upload:
    post:
      tags:
        - upload
      summary: Uploading file
      description: >-

        **Description**
        
        
        The upload method is used to upload visuals to the database. It takes as parameters the api_token and api_secret, on the headers of the request, and the file to be uploaded, in the body of the request.
        
        
        In case of success, the upload route will return to the user a visual id (visual_id), which is the unique identification of this new visual. The visual hash will be used for the user for the *create* and *info* routes. The upload route is the first step for consuming the BriAPI for new visuals.  
        

        **Response**


        visual_id - The visual id in the reponse of the upload route must be kept by the user in order to query image info and make changes to it


        ```{ "visual_id": "9ea9a4d2d19977a7c" }```
        
        
        The *visual_id* in the response of the /upload route can be used for the /info and /create routes, but also to access the Bria web tool with the uploaded visual.
        
        
        In order to do that, the user can access the following url: ```https://labs.bria.ai/tools/{visual_id}```, where the *{visual_id}* comes from the response of the */upload* route
        
        
        At Bria's web tool, the user has the ability to make many changes to the visual and also generate live videos, all in a intuitive interactive platform.
        
        
        Bria's web tool can also be embedded in other website, with the use of an iframe HTML element:
        
        
            <iframe src="https://labs.bria.ai/tools/{visual_id}" />
            
            
        <img src="https://bria-web-serving.s3.amazonaws.com/Screen+Shot+2021-07-29+at+12.12.37.png" />
        
        
        **Constrain**


        File should not be larger than 25mb
        
        
        The status code 413 will be returned in case of file exceeding maximum size
      operationId: upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:     
                file:  
                  type: string
                  format: binary
        description: Upload new image
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  visual_id: 
                    type: string
                    description: unique visual identification
        '405':
          description: Method not allowed.
        '413':
          description: Request entity too large.
        '415':
          description: Unsuported media type.
servers:
  - url: 'https://briator-api.bria.ai:5000/v1'
