openapi: 3.0.0
info:
  description: >
    The Bria's API was designed for users to interact with the BriEngine, creating new images with specific requests. This document will outline the capabilities of the API and explain to users how to implement it.
    
    
    The common use of the Bria's API is according to the following order:
      - /upload - Using the *Upload Route* to upload a new image to the database
      - /info - Using the *Info Route* to understand the modification possibilities for each element in the image 
      - /create - Using the *Create Route* to create a new visual with requested modifications of elements according to Info Route possibilities.   
    


    # Versioning


    The current version of the web API is known as V1 and is considered to be in a draft phase. While we donâ€™t expect public endpoints to materially change, please bear in mind that the API is still under development.


    # Authentication
    
      The Bria's API consists of a number of methods for uploading and creating new visual assets. The REST (representational state transfer) API methods can be called directly from within your own custom code.

        curl --location --request POST 'https://briator-api.bria.ai:5000/v1' \
        --header: 'api_token: <...>' \
        --header: 'api_secret: <...>' \
        ...
        
        
      You can access the API Token and API Secret through Bria's platform [by clicking here](https://labs.bria.ai/organization/).
      
      
    # Demonstration of usage
      
      For a full example of the Bria's API usage, using python code, [please check this link](https://github.com/Bria-AI/Bria's API/blob/main/demo.py)

            
  version: '1'
  title: Bria's API
paths:
  /upload:
    post:
      tags:
        - upload
      summary: Uploading file
      description: >-

        **Description**
        
        
        The *Upload Route* is used to upload visuals to the database.
        
        
        The *Upload Route* will return to the user a visual identification. It is the first step for consuming the Bria's API for new visuals.
        

        **Response**


        The visual id in the response of the *Upload Route* must be kept by the user in order to query image info and make changes to it


        ```{ "visual_id": "9ea9a4d2d19977a7c" }```
        
        
        The *visual_id* in the response of the /upload route can be used for the /info and /create routes, but also to access the Bria web tool with the uploaded visual.
        
        
        In order to do that, the user can access the following url: ```https://labs.bria.ai/tools/{visual_id}```, where the *{visual_id}* comes from the response of the */upload* route
        
        
        In Bria's web tool, the user has the ability to make many changes to the visual and also generate live videos, using an intuitive interactive platform.


        Bria's web tool can also be embedded in other websites, with the use of an iframe HTML element:
        
        
            <iframe src="https://labs.bria.ai/tools/{visual_id}" />
            
            
        <img src="https://bria-web-serving.s3.amazonaws.com/Screen+Shot+2021-07-29+at+12.12.37.png" />
        
        
        **Constrain**


        File should not be larger than 25mb
        
        
        The status code 413 will be returned in case of the file exceeding its maximum size
      operationId: upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:     
                file:  
                  type: string
                  format: binary
        description: Upload new image
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  visual_id: 
                    type: string
                    description: unique visual identification
        '405':
          description: Method not allowed.
        '413':
          description: Request entity too large.
        '415':
          description: Unsuported media type.
  /info:
    post:
      tags:
        - info
      summary: Getting image info
      description: >-
        
        **Description**
        
        
        The *Info Route* is used to retrieve useful information on a specific visual that was previously uploaded to the database.
        
        
        The *Info Route* will return to the user a description of the scene and the possible actions for each element within it. 
        
        
        The *Info Route* will list the possible changes that the Bria's API supports for each element in the scene.
        

        
        **Response**


        Dictionary - Relevant information about the required image. An object with JSON format, containing two key-value pairs:
        
          - **description**: a brief description of the visual
          - **scene**: an array of objects representing each of the elements recognized in the visual.
          
        Each object inside the *scene* array will contain:
          
          - **id**: the id of the specific element
          - **labels**: an array with known information on the element, such as age range and gender
          - **actions**: an object containing the available changes for the */create* route.
          
        The *actions* object contains the following key-value pairs:
        
          - **age**: an array containing the available age modifications for the element. Example:
              
              
            { "age": [ "mid-20", "mid-40" ] }  *

              
              
          - **diversify**: an array containing the available ethnicity modifications for the element. Example:
              
              
            { "diversify": [ "africa", "brazil", "mexico" ] }  *

            
          - **glasses**: an array containing the available glasses modifications for the element. Example:
              
              
            { "glasses": [ "light", "none" ] }  *

            
          - **smile**: an array containing the available smile modifications for the element. Example:
              
              
            { "smile": [ "calm", "serious" ] }  *
        
          
          *check response schema for full enums
      operationId: info
      parameters:
        - in: query
          name: visual_id
          required: true
          schema:
            type: string
          description: visual hash of the image
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                    description: description of the image
                  scene:
                    type: array
                    items:
                      type: object
                      properties:
                        actions: 
                          type: object
                          properties:
                            age:
                              type: array
                              items:
                                type: string
                                enum: ["mid-20", "mid-40", "mid-60"]
                            diversify:
                              type: array
                              items:
                                type: string
                                enum: ["original", "africa", "korea", "india", "japan", "sweden", "germany", "russia", "mexico", "brazil", "england", "spain", "france", "unsplash"]
                            glasses:
                              type: array
                              items:
                                type: string
                                enum: ["light", "heavy", "none"]
                            smile:
                              type: array
                              items:
                                type: string
                                enum: ["happy", "calm", "serious"]
                        id: 
                          type: string
                        labels:
                          type: array
                          items:
                            type: string
                            
        '400':
          description: Bad request.
  /create:
    post:
      tags:
        - create
      summary: Create new image based on changes requested by user
      description: >-
        
        <img src="https://bria-web-serving.s3.amazonaws.com/_create.png" />
        
        
        **Description**
 
        
        
        The *Create Route* is used to create a new visual, based on the changes requested by the user for a previously uploaded visual.
        
        
        The *Create Route* will return the url for accessing the new generated visual and the confidence that Bria has in the quality of the new visual.
        

        **Response**


        image_res - url to new created image
        
        
        confidence - string indicating the level of confidence Bria has in the quality of the created image


        ```{ "image_res": "...", "confidence": "..." }```
        
        
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:     
                visual_id:  
                  type: string
                  description: visual id of the image the user wants to create a new one from
                changes:  
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: id of the element in the image
                      actions:
                        type: object
                        description: the changes the user wishes to perform for this person in the image
                        properties:
                          age:
                            type: string
                            enum: ["mid-20", "mid-40", "mid-60"]
                            description: Value must be included in the response of the info route in order for the request to be succesfull
                          diversify:
                            type: string
                            enum: ["original", "africa", "korea", "india", "japan", "sweden", "germany", "russia", "mexico", "brazil", "england", "spain", "france", "unsplash"]
                            description: Value must be included in the response of the info route in order for the request to be succesfull
                          glasses:
                            type: string
                            enum: ["light", "heavy", "none"]
                            description: Value must be included in the response of the info route in order for the request to be succesfull
                          smile:
                            type: string
                            enum: ["happy", "calm", "serious"]
                            description: Value must be included in the response of the info route in order for the request to be succesfull
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_res:
                    type: string
                  confidence:
                    type: string
                    description: Low, high or intermidiate
        '400':
          description: Bad request.

servers:
  - url: 'https://briator-api.bria.ai:5000/v1'
