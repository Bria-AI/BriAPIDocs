openapi: 3.0.0
info:
  description: >
    The Bria's API was designed for users to interact with the BriEngine,
    creating new images and videos with specific requests. This document will
    outline the capabilities of the API and explain to users how to implement
    it.


    **The common use of the Bria's API is according to the following order:**
      - /upload - Using the *Upload Route* to upload a new image to the database
      - /info - Using the *Info Route* to understand the modification possibilities for each element in the image 
      
      
      With the response from the *Info Route*, the following routes can be used without particular order:
      
      
      - /create - Using the *Create Route* to create a new visual with requested modifications of elements according to Info Route possibilities.   
      - /video - (coming soon) Using the *Video Route* to make a short video out of a single still image
        
        
      The following route can be used at any moment:
      - /generate - (coming soon) Using the *Generate Route* to generate a completely new visual without the need to upload a seed image
      
      
      
    # Bria API's supported values and responses


    This section of the documentation serves as a dictionary of the possible
    values to be used in the API routes.


    For applicability of each list of values, please attend yourself to each
    route of the API.


      For the **human** class, these are the relevant lists of values:
      - Age
      
      
         ["mid-20", "mid-40", "mid-60"]
         
         
      - Diversity
      
      
          ["original", "africa", "korea", "india", "japan", "sweden", "germany", "russia", "mexico", "brazil", "england", "spain", "france"]
         
         
      - Expressions
      
      
          ["happy", "calm", "serious", "dreaming", "angry", "fear", "contempt", "disgusted", "sad"]
          
      - Glasses
      
      
          ["light", "heavy", "none"]
        
        
      - Hair Color
         
         
          ["light_hair", "dark_hair"]
              
              
      - Gender
         
         
          ["femininity", "masculinity"]
              
            
      - Makeup
         
         
          ["light", "heavy", "none"]
              
            
      - Hair Line
         
         
          ["high", "low"]



    # Versioning


    The current version of the web API is known as V2 and is considered to be in
    a draft phase. While we donâ€™t expect public endpoints to materially change,
    please bear in mind that the API is still under development.


    # Authentication

      The Bria's API consists of a number of methods for uploading and creating new visual assets. The REST (representational state transfer) API methods can be called directly from within your own custom code.

        curl --location --request POST 'http://bria-api.com:5000/v1' \
        --header: 'api_token: <...>' \
        --header: 'api_secret: <...>' \
        ...
        
        
      You can access the API Token and API Secret through Bria's platform [by clicking here](https://labs.bria.ai/organization/).
      
      
    # Demonstration of usage
      
      For a full example of the Bria's API usage, using python code, [please check this link](https://github.com/Bria-AI/BriAPI/blob/main/demo.py)

            
  version: '2'
  title: Bria's API
paths:
  /upload:
    post:
      tags:
        - upload
      summary: Uploading file
      description: >-

        **Description**


        The *Upload Route* is used to upload visuals to the database.


        The *Upload Route* will return to the user a visual identification. It
        is the first step for consuming the Bria's API for new visuals.


        **Response**

          
          The visual id in the response of the *Upload Route* must be kept by the
        user in order to query image info and make changes to it


        ```{ "visual_id": "9ea9a4d2d19977a7c" }```


        The *visual_id* in the response of the /upload route can be used for all
        other routes.


        **Bria generative Web tool**


        The uploaded visual can be seen and used in the Bria generative web tool
        in cases where the tool is licensed as part of the project.


        In order to do that, the user can access the following url:
        ```https://labs.bria.ai/tools/{visual_id}```, where the *{visual_id}*
        comes from the response of the */upload route*


        In Bria's web tool, the user has the ability to make many changes to the
        visual and also generate live videos, using an intuitive interactive
        platform.


        Bria's web tool can also be embedded in other websites, with the use of
        an iframe HTML element:
            
            
        <img src="https://bria-web-serving.s3.amazonaws.com/new_tool.png" />


        **Constrain**


        File should not be larger than 25mb


        The status code 413 will be returned in case of the file exceeding its
        maximum size
      operationId: upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: Upload new image
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  visual_id:
                    type: string
                    description: unique visual identification
        '405':
          description: Method not allowed.
        '413':
          description: Request entity too large.
        '415':
          description: Unsupported media type.
  /{visual_id}/info:
    get:
      tags:
        - info
      summary: Getting image info
      description: >-



        **Description**


        The *Info Route* is used to retrieve useful information on a specific
        visual that was previously uploaded to the database.


        The *Info Route* will return to the user a description of the scene and
        the possible actions for each element within it. 


        The *Info Route* will list the possible changes that the Bria's API
        supports for each element in the scene.



        **Response**


        Dictionary - Relevant information about the required image. An object
        with JSON format, containing two key-value pairs:

          - **description**: a brief description of the visual
          - **scene**: an array of objects representing each of the elements recognized in the visual.
          
        Each object inside the *scene* array will contain:
          
          - **id**: the id of the specific element
          - **class**: the class type of the element (human, object, etc)
          - **labels**: an array with known information on the element, such as age range and gender
          - **actions**: an object containing the available changes for the */create* route for this specific element, depending directly on its class and specificity
          
        The content of *actions* object will depend on the class of the element
        it refers to. The currently supported classes are listed below, with
        their respective possible actions:


        *Human class:*
        
        - **age**: an array containing the available age modifications for the element. Example:
            
              { "age": [ "mid-20", "mid-40", "mid-60" ] }
        
              
        - **diversity**: an array containing the available ethnicity
        modifications for the element. Example:
            
              { "diversity": [ "africa", "brazil", "mexico" ] }
              
         
        - **expressions**: an array containing the available expressions
        modifications for the element. Example:
              
              { "expressions": [ "happy","calm","serious", "angry" ] }
              
              
        - **glasses**: an array containing the available glasses modifications for the element. Example:
         
              { "glasses": [ "light", "heavy", "none" ] }
              
              
        - **hair_color**: an array containing the available hair color modifications for the element. Example:
         
              { "hair_color": [ "light_hair", "dark_hair" ] }
              
              
        - **gender**: an array containing the available gender modifications for the element. Example:
         
              { "gender": [ "femininity", "masculinity" ] }
              
            
        - **makeup**: an array containing the available makeup modifications for the element. Example:
         
              { "makeup": [ "light", "heavy", "none" ] }
              
            
        - **hair_line**: an array containing the available hair line modifications for the element. Example:
         
              { "hair_line": [ "high", "low" ] }
            
          
          ***check response schema for full enum of each action**
      operationId: info
      parameters:
        - in: path
          name: visual_id
          required: true
          schema:
            type: string
          description: visual hash of the image
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                    description: description of the image
                  scene:
                    type: array
                    items:
                      type: object
                      properties:
                        actions:
                          type: object
                          properties:
                            age:
                              type: array
                              items:
                                type: string
                                enum: ["mid-20", "mid-40", "mid-60"]
                            diversity:
                              type: array
                              items:
                                type: string
                                enum:
                                  - original
                                  - africa
                                  - korea
                                  - india
                                  - japan
                                  - sweden
                                  - germany
                                  - russia
                                  - mexico
                                  - brazil
                                  - england
                                  - spain
                                  - france
                            expressions:
                              type: array
                              items:
                                type: string
                                enum:
                                  - happy
                                  - calm
                                  - serious
                                  - dreaming
                                  - angry
                                  - fear
                                  - contempt
                                  - disgusted
                                  - sad
                            glasses:
                              type: array
                              items:
                                type: string
                                enum: ["light", "heavy", "none"]
                            hair_color:
                              type: array
                              items:
                                type: string
                                enum: ["dark_hair", "light_hair"]
                            gender:
                              type: array
                              items:
                                type: string
                                enum: ["femininity","masculinity"]
                            makeup:
                              type: array
                              items:
                                type: string
                                enum: ["makeup", "no_makeup"]
                            hair_line:
                              type: array
                              items:
                                type: string
                                enum: ["high", "low"]
                        id:
                          type: string
                        class:
                          type: string
                        labels:
                          type: array
                          items:
                            type: string
        '400':
          description: Bad request.
  /{visual_id}/create:
    post:
      tags:
        - create
      summary: Create new image based on changes requested by user
      description: >-


        **Description**



        The *Create Route* is used to create a new visual, based on the changes
        requested by the user for a previously uploaded visual.


        The *Create Route* will return the url for accessing the new generated
        visual and the confidence that Bria has in the quality of the new
        visual.


        **Request body**


        - **changes**: the changes requested by the user to apply to the visual


        The change can be sent as an object containing the name and the value of
        the change, for example:


          ```{ key: "japan", value: 5}```


        or as a string containing the name of the change which will take the
        default value, for example:


          ```"japan"```


        **Response**


        image_res - url to new created image


        confidence - string indicating the level of confidence Bria has in the
        quality of the created image


        ```{ "image_res": "...", "confidence": "..." }```
      operationId: create
      parameters:
        - in: path
          name: visual_id
          required: true
          schema:
            type: string
          description: visual id of the image the user wants to create a new one from
        - in: query
          name: include_layers
          schema:
            type: boolean
          description: whether to include layers or not
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                changes:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: id of the element in the image
                      actions:
                        type: object
                        description: >-
                          the changes the user wishes to perform for this person
                          in the image
                        properties:
                          diversity:
                            type: string
                            enum:
                              - original
                              - africa
                              - korea
                              - india
                              - japan
                              - sweden
                              - germany
                              - russia
                              - mexico
                              - brazil
                              - england
                              - spain
                              - france
                              - "or {'key':'africa','value':0}"
                              - '{''key'':''korea'',''value'':5}'
                              - '{''key'':''indea'',''value'':10}'
                            description: >-
                              Value must be in range [0-10] where 0 means no
                              change and 10 means max change, and if value is
                              not specified it should be considered as the
                              default value
                          expressions:
                            type: string
                            enum:
                              - happy
                              - surprised
                              - calm
                              - dreaming
                              - angry
                              - fear
                              - contempt
                              - disgusted
                              - sad
                              - "or {'key':'happy','value':0}"
                              - '{''key'':''surprised'',''value'':5}'
                              - '{''key'':''calm'',''value'':10}'
                            description: >-
                              Value must be in range [0-10] where 0 means no
                              change and 10 means max change, and if value is
                              not specified it should be considered as the
                              default value
                          appearance:
                            type: array
                            items:
                              enum:
                                - age
                                - glasses
                                - dark_hair
                                - "or {'key':'age','value':0}"
                                - '{''key'':''glasses'',''value'':5}'
                                - '{''key'':''dark_hair'',''value'':10}'
                            description: >-
                              Value must be in range [0-10] where 0 means no
                              change and 10 means max change, and if value is
                              not specified it should be considered as the
                              default value
                          glasses:
                            type: string
                            enum: ["light", "heavy", "none"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
                          hair_color:
                            type: string
                            enum: ["dark_hair", "light_hair"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
                          gender:
                            type: string
                            enum: ["femininity","masculinity"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
                          makeup:
                            type: string
                            enum: ["makeup", "no_makeup"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
                          hair_line:
                            type: string
                            enum: ["high", "low"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_res:
                    type: string
                  confidence:
                    type: string
                    description: Low, high or intermidiate
        '400':
          description: Bad request.

  /{visual_id}/video:
    post:
      tags:
        - video
      summary: Generate a video from a still image
      description: >-


        **Description**



        With the *Video Route*, a 8-15 seconds high quality video can be
        generated from a single still image.



        The *Video Route* will return the url for accessing the new generated
        video.
      operationId: video
      parameters:
        - in: path
          name: visual_id
          required: true
          schema:
            type: string
          description: visual id of the image the user wants to create a new video from
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email_address:
                  type: string
                  description: email address for send movies
                movie_name:
                  type: string
                  description: name of movie
                frame_rate:
                  type: number
                  description: number of frames per second
                number_of_frames:
                  type: number
                  description: a speed parameter
                zoom_type:
                  type: string
                  enum:
                    - deep
                    - shallow
                    - medium
                  description: zoom type
                movie_direction:
                  type: string
                  enum:
                    - random
                    - constant
                    - up
                    - down
                  description: the direction of the video
                zoom_param:
                  type: number
                  description: zoom parameter
                sharpnes_value:
                  type: string
                  description: sharpness value
                depth_value:
                  type: number
                  description: depth value
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  video_res:
                    type: string
                  confidence:
                    type: string
                    description: Low, high or intermediate
        '400':
          description: Bad request.
servers:
  - url: http://bria-api.com:5000/v2
