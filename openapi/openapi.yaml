openapi: 3.0.0
info:
  title: The Bria API
  version: '2'
  description: >
    # Introduction
    
    
    The Bria API was designed for users to interact with the BriEngine,
    creating new images and videos with specific requests. This document will
    outline the capabilities of the API and explain to users how to implement
    it.


    **The common use of the Bria API is according to the following order:**
      - /upload - (Coming Soon) Using the *Upload Route* to upload a new image to the database
      - /info - Using the *Info Route* to understand the change possibilities for each object in the image 
    
    With the response from the *Upload Route*, the following routes can be used without any particular order:
      - /remove_bg - (Coming Soon) Using the *Remove BG Route* to remove the background of a stil image.
      - /video - (Coming Soon) Using the *Video Route* to make a short video based on a single still image.
      
    With the response from the *Info Route*, the following route can be used without any particular order:
      - /create - Using the *Create Route* to create a new visual with requested changes of elements according to the /info route possibilities. 
        
    The following route can be used at any moment:
      - /generate - (Coming Soon) Using the *Generate Route* to generate a completely new visual without the need to upload a seed image
      
      
      
    # Versioning


    The current version of the web API is known as V2 and is considered to be in
    a draft phase. While we donâ€™t expect public endpoints to materially change,
    please bear in mind that the API is still under development.


    # Authentication

      The Bria API consists of a number of methods for uploading and creating new visual assets. The REST (representational state transfer) API methods can be called directly from within your own custom code.

        curl --location --request POST 'http://bria-api.com:5000/v2' \
        --header: 'api_token: <...>' \
        --header: 'api_secret: <...>' \
        ...
        
        
      You can access the API Token and API Secret through Bria's platform <a href="https://labs.bria.ai/organization/" target="_blank">by clicking here</a>.
      
      
    # Demonstration of usage
      
      For a full example of the Bria API usage, using python code, <a href="https://github.com/Bria-AI/BriAPI/blob/main/demo_v2.py" target="_blank">please check this link</a>.

            
paths:
  /upload:
    post:
      tags:
        - upload (Coming Soon)
      summary: Uploading file
      description: >-

        **Description**


        The *Upload Route* is used to upload visuals to the database.


        The *Upload Route* will return a visual identification to the user. It's
        the first step for consuming the Bria API for new visuals.


        **Response**

          
          The visual id in the response of the *Upload Route* must be kept by the
        user in order to query image info and make changes to it


        ```{ "visual_id": "9ea9a4d2d19977a7c" }```


        The *visual_id* in the response of the /upload route can be used for all
        other routes.


        **Bria generative Web tool**


        The uploaded visual can be seen and used in the Bria generative web tool
        in cases where the tool is licensed as part of the project.


        To do so, the user can access the following url:
        ```https://labs.bria.ai/tools/{visual_id}```, where the *{visual_id}*
        comes from the response of the */upload route*.


        In Bria's web tool, the user has the ability to make many changes to the
        visual and also generate live videos, using an intuitive interactive
        platform.


        Bria's web tool can also be embedded in other websites, with the use of
        an iframe HTML element:
            
            
        <img src="https://bria-web-serving.s3.amazonaws.com/new_tool_29_03_2022.png" />


        **Constraints**


        Files should not be larger than 12MB. The status code 413 will be returned if the file exceeds its
        maximum size.
        
        
        Bria API currently only supports JPEG files. The status code 415 will be returned if the file is of a different type.
        
      operationId: upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: Upload new image
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  visual_id:
                    type: string
                    description: unique visual identification
        '405':
          description: Method not allowed.
        '413':
          description: Request entity too large.
        '415':
          description: Unsupported media type.
  /{visual_id}/info:
    get:
      tags:
        - info
      summary: Getting image info
      description: >-



        **Description**


        The *Info Route* is used to retrieve useful information on a specific
        visual that was previously uploaded to the database.


        The *Info Route* will return a description of the scene to the user and
        the possible actions for each element within it. 


        The *Info Route* will list the possible changes that the Bria API
        supports for each element in the scene.


      operationId: info
      parameters:
        - in: path
          name: visual_id
          required: true
          schema:
            type: string
          description: visual id of the image, received after using the /upload route.
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                    description: (Coming Soon) A brief description of the visual
                    example: "Coming Soon"
                  scene:
                    type: array
                    description: An array of objects representing each of the elements recognized in the visual.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The id of the element
                          example: "8c52cf181e93b9f9ba3292eae1630a3fc9e06bc97ec6b03085f46545d64f1f64"
                        type:
                          type: string
                          description: The type of the element 
                          example: "person"
                        labels:
                          type: array
                          description: An array with known information about the element, such as age range and gender.
                          example: ["age_36-54", "calm", "Male"]
                          items:
                            type: string
                        actions:
                          type: object
                          description: An object that contains the changes available for the /create route for this specific element, based directly on its type and specificity.
                          properties:
                            age:
                              type: array
                              description: An array of the available age changes for this element. 
                              items:
                                type: string
                                enum: ["mid-20", "mid-40", "mid-60"]
                            diversity:
                              type: array
                              description: An array of the available diversity changes for this element. 
                              items:
                                type: string
                                enum:
                                  - africa
                                  - korea
                                  - india
                                  - japan
                                  - sweden
                                  - germany
                                  - russia
                                  - mexico
                                  - brazil
                                  - england
                                  - spain
                                  - france
                            expression:
                              type: array
                              description: An array of the available expression changes for this element. 
                              items:
                                type: string
                                enum:
                                  - happy
                                  - calm
                                  - dreaming
                                  - angry
                            glasses:
                              type: array
                              description: An array of the available glasses changes for this element.
                              items:
                                type: string
                                enum: ["light", "heavy", "none"]
                            haircolor:
                              type: array
                              description: An array of the available hair color changes for this element.
                              items:
                                type: string
                                enum: ["black", "brown", "red", "blond", "gray"]
                            gender:
                              type: array
                              description: An array of the available gender changes for this element.
                              items:
                                type: string
                                enum: ["femininity","masculinity"]
                            makeup:
                              type: array
                              description: An array of the available makeup changes for this element.
                              items:
                                type: string
                                enum: ["light", "heavy", "none"]
                            hair_line:
                              type: array
                              description: An array of the available hair line changes for this element.
                              items:
                                type: string
                                enum: ["high", "low"]
                            beard:
                              type: array
                              description: An array of the available facial hair changes for this element.
                              items:
                                type: string
                                enum: ["shaved", "medium", "full"]
        '400':
          description: Bad request.
  /{visual_id}/create:
    post:
      tags:
        - create
      summary: Create new image based on changes requested by user
      description: >-


        **Description**



        The *Create Route* is used to create a new visual, based on the changes
        requested by the user for a previously uploaded visual.


        The *Create Route* will return the url for accessing the new generated
        visual and the confidence that Bria has in the quality of the new
        visual.


        **Request body**


        - **changes**: the changes requested by the user to apply to the visual


        The change can be sent as an object containing the name and the value of
        the change, for example:


          ```{ key: "japan", value: 5}```


        or as a string containing the name of the change which will take the
        default value, for example:


          ```"japan"```


        **Response**


        image_res - url to the new created image


        confidence - string indicating the level of confidence Bria has in the
        quality of the created image


        ```{ "image_res": "...", "confidence": "..." }```
      operationId: create
      parameters:
        - in: path
          name: visual_id
          required: true
          schema:
            type: string
          description: visual id of the image the user wants to create a new one from
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                changes:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: id of the object in the image
                      actions:
                        type: object
                        description: >-
                          the changes the user wishes to perform for this object
                          in the image
                        properties:
                          age:
                            type: string
                            enum: ["mid-20", "mid-40", "mid-60"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
                          diversity:
                            type: string
                            enum:
                              - africa
                              - korea
                              - india
                              - japan
                              - sweden
                              - germany
                              - russia
                              - mexico
                              - brazil
                              - england
                              - spain
                              - france
                              - "or {'key':'africa','value':0}"
                              - '{''key'':''korea'',''value'':5}'
                              - '{''key'':''indea'',''value'':10}'
                            description: >-
                              Value must be in range [0-10] where 0 means no
                              change and 10 means max change, and if value is
                              not specified it should be considered as the
                              default value
                          expression:
                            type: string
                            enum:
                              - happy
                              - surprised
                              - calm
                              - dreaming
                              - angry
                              - "or {'key':'happy','value':0}"
                              - '{''key'':''surprised'',''value'':5}'
                              - '{''key'':''calm'',''value'':10}'
                            description: >-
                              Value must be in range [0-10] where 0 means no
                              change and 10 means max change, and if value is
                              not specified it should be considered as the
                              default value
                          glasses:
                            type: string
                            enum: ["light", "heavy", "none"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
                          hair_color:
                            type: string
                            enum: ["dark_hair", "light_hair"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
                          gender:
                            type: string
                            enum: ["femininity","masculinity"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
                          makeup:
                            type: string
                            enum: ["makeup", "no_makeup"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
                          hair_line:
                            type: string
                            enum: ["high", "low"]
                            description: Value must be included in the response of the info route in order for the request to be successfull
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_res:
                    type: string
                  confidence:
                    type: string
                    description: Low, high or intermidiate
        '400':
          description: Bad request.

  /{visual_id}/remove_bg:
    post:
      tags:
        - remove_bg (Coming Soon)
      summary: Remove the background of an image
      description: >-


        **Description**



        TheÂ *Remove BG Route*Â is used to remove the background of a previously uploaded image. 
        
        
        This route can also be used on an image that has been changed by the user using the /create route.
        
        
        TheÂ *Remove BG Route*Â will return the URL for accessing the updated image.
        

      operationId: remove_bg
      parameters:
        - in: path
          name: visual_id
          required: true
          schema:
            type: string
          description: visual id  of the image from which the user wishes to remove the background
        - in: query
          name: visual_url
          required: false
          schema:
            type: string
          description: URL of the new image the user has created from the original image, using the */create* route
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  no_bg_image_url:
                    type: string
                    description: URL that represents the updated visual created in the request.
        '400':
          description: Bad request.

  /{visual_id}/video:
    post:
      tags:
        - video (Coming Soon)
      summary: Generate a video from a still image
      description: >-


        **Description**



        TheÂ *Video Route*Â is used to create a new video, based on a previously uploaded single still image. 
        
        
        This route can also be used on an image that has been changed by the user using the /create route.
        
        
        TheÂ *Video Route*Â will return the URL for accessing the new generated video and the confidence that Bria has in the quality of this video.
        

      operationId: video
      parameters:
        - in: path
          name: visual_id
          required: true
          schema:
            type: string
          description: visual id of the image the user wants to create a new video from
        - in: query
          name: visual_url
          required: false
          schema:
            type: string
          description: URL of the new image the user has created from the original image, using the */create* route
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                changes:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: id of the object in the image. If the required action is camera_movement, then id should get the value visual_id.
                      actions:
                        type: object
                        description: >-
                          the video type the user wishes to create based on the selected object in the image
                        properties:
                          camera_movement:
                            type: object
                            properties:
                              type:
                                type: string
                                enum: ["zoom_in", "zoom_out"]
                                description: Determines the type of movement in the video. Additional types will be added in the future.
                                default: "zoom_in"
                                example: "zoom_in"
                              focus_area:
                                type: string
                                enum: ["top_left", "top_middle","top_right","center_left","center_middle","center_right","bottom_left","bottom_middle","bottom_right"]
                                description: Determines the focus area in the video and which area in the image will be the final frame of the video.
                                default: "center_middle"
                                example: "center_middle"
                              video_depth:
                                type: string
                                enum: ["shallow", "medium","deep"]
                                description: Determines how deep in the focus area the camera will move. 
                                default: "shallow"
                                example: "shallow"
                              boomerang_loop:
                                type: boolean
                                description: Determines if the final video will include a boomerang loop (TRUE) or not (FALSE).
                                default: FALSE
                                example: FALSE
                              pace:
                                type: string
                                enum: ["slow", "medium","fast"]
                                description: Determines the pace of the video. This property is incompatible with `duration` (you can use only one in a single call).
                                default: "medium"
                                example: "medium"
                              duration:
                                type: integer
                                description: Determines the duration of the video in seconds. This property is incompatible with `pace` (you can use only one in a single call).
                                default: 5
                                example: 5
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  video_response:
                    type: string
                    description: URL that represents the video created in the request.
                  confidence:
                    type: string
                    description: Indicating the level of confidence Bria has in the quality of the created video. At present, the response will be blank.
        '400':
          description: Either `pace` or `duration` are required.
servers:
  - url: http://bria-api.com:5000/v2
